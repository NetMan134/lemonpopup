#!/bin/sh
#
#	Generic script to notify and change adjustable controls
#	Only tested with volume (amixer) on OpenBSD
#
#	requirements: Nerd font, xrandr, xdpyinfo, bc, sed, awk
#	inspired by /r/Kwbmm's post:
#	https://blog.z3bra.org/2014/04/pop-it-up.html
############################################################

# how long should the popup remain?
duration=1.5

# colors
bar_bg='#64000000'
bar_fg='#87FFAF'

# Test if you're getting the right font with `fc-match`
# ❯ fc-match InputMonoNerdFont:style=Bold
# InputMono Bold Nerd Font Complete.ttf: "InputMono Nerd Font" "Bold"
#
# Explore the available icons using:
# ❯ xfd -fa InputMonoNerdFont:style=Bold
icon_font="InputMonoNerdFont"
text_font="DejaVuSans:style:Bold"

# null command/text
# Do not change
NULL=NULL

#################################################
# generates a string of filled rectangles or a 	#
# combination of full and empty rectangles		#
# arguments:									#
# $1 - current level (0-100)					#
# $2 - print empty squares? (default: 0)		#
#################################################
level_graph() {

    # to figure out the correct codes use
    # printf '\u2589' | od -b
    # Nerd font
	# rect_fill="\u2589"
	# rect_empty="%{T3}\u25a1%{T1}"
	rect_fill="\342\226\211"
	rect_empty="%{T3}\342\226\241%{T1}"

	val=$1
	step=5
	count=0
	graph="%{T4} "
	while [ $count -le 19 ]; do
        curr=$(echo $count*${step} | bc -l)
		if [ $curr -lt $val ]; then
			graph="${graph}${rect_fill}"
		elif [ $2 = 1 ]; then
			graph="${graph}${rect_empty}"
		fi
        count=$(echo $count+1 | bc -l)
	done
	graph="${graph}%{T1}"

	if [ -n ${3+x} ] && [ ${3} -ne 0 ]; then
		graph="%{c}${graph}%{l}"
	else
		graph="%{l} ${graph}%{l}"
	fi

	echo ${graph}
}

#################################################
# cross-platform icon implementation			#
# requires: font-awesome						#
#################################################

audio_icon() {

	# muted icon?
	if [ -n ${1+x} ] && [ ${1} = "yes" ]; then
		# ico="%{T2}\uf466%{T1}"
		ico="%{T2}\357\221\246%{T1}"
		echo ${ico}
		return;
	fi

	# ramp-high volume icon is the default
	# ico="%{T2}\uf028%{T1}"
	ico="%{T2}\357\200\250%{T1}"

	# if the caller speicifed the current level
	# set the appropriate ramp icon
	if [ ${2} -ne -1 ]; then
		if [ ${2} -gt 30 ] && [ ${2} -le 65 ]; then
			# ico="%{T2}\uf027%{T1}"
			ico="%{T2}\357\200\247%{T1}"
		elif [ ${2} -le 30 ]; then
			# ico="%{T2}\uf026%{T1}"
			ico="%{T2}\357\200\246%{T1}"
		fi
	fi

	echo ${ico}
}

bcklight_icon() {

	# ico="%{T2}\uf185%{T1}"
	ico="%{T2}\357\206\205%{T1}"
	echo ${ico}
}

bright_icon() {
    
	# ico="%{T2}\uf185%{T1}"
	ico="%{T2}\357\206\205%{T1}"
	echo ${ico}
}

kbdlight_icon() {
	
	if [ ${2} -eq 0 ]; then
		# 0-level icon
		# ico="%{T2}\uf40b%{T1}";
		ico="%{T2}\357\220\213%{T1}";
	else
		# defult icon
		# ico="%{T2}\uf40b%{T1}"
		ico="%{T2}\357\220\213%{T1}";
	fi
	echo ${ico}
}

#################################################
# Linux implementation of volume control		#
# requires: pulseaudio libpulse					#
#################################################
Linux_audio_get() {
  pactl list sinks | grep -A 15 'Sink #0' | grep 'Volume:' |\
    grep -v 'Base Volume:' | awk -F : '{print $3}' | grep -oP '.{0,3}%' |\
    sed s/.$// | tr -d ' '
}

Linux_audio_status() {
    pactl list sinks | grep -A 15 "Sink #0" | grep "^[[:space:]]Mute:" | cut -f 2 -d ':' | tr -d ' '
}

Linux_audio_set() {

    local step=$2

	case "${1}" in
		toggle)
			pactl list short sinks | cut -f1 | while read -r line; do pactl set-sink-mute $line toggle; done
			break
			;;
		off)
			pactl list short sinks | cut -f1 | while read -r line; do pactl set-sink-volume $line 0%; done
			break
			;;
		max)
			pactl list short sinks | cut -f1 | while read -r line; do pactl set-sink-volume $line 100%; done
			break
			;;
		inc)
			pactl list short sinks | cut -f1 | while read -r line; do pactl set-sink-volume $line +${step}%; done
			break
			;;
		dec)
			pactl list short sinks | cut -f1 | while read -r line; do pactl set-sink-volume $line -${step}%; done
			break
			;;
		*)
			echo 1
			return 1
			;;
	esac
	echo 0
	return 0
}

#################################################
# OpenBSD implementation of volume control		#
# notes: wasn't tested yet						#
#################################################
OpenBSD_audio_get() {
	# local vol=$(bc -l <<< "scale=0;$(mixerctl outputs.master | sed 's/.*,//g')/2.55")
	echo $vol
}

OpenBSD_audio_status() {
	local muted=$(mixerctl | grep outputs.master.mute=on)
	if [ -z ${muted} ]; then echo "on";
	else echo "off"; fi
}


OpenBSD_audio_set() {

    local step=$2

    case "${1}" in
        toggle)
            mixerctl outputs.master.mute=toggle
            break
            ;;
        off)
            mixerctl outputs.master=0
            break
            ;;
        max)
            mixerctl outputs.master=255
            break                                                                                           
            ;;   
        inc)  
            mixerctl outputs.master=+${step}
            break
            ;;   
        dec)  
            mixerctl outputs.master=-${step}
            break
            ;;   
        *)    
            echo 1
            return 1
            ;;      
    esac      
    echo 0
    return 0
}

#################################################
# Linux implementation of backlight control		#
# requires: xorg-xbacklight						#
#################################################
Linux_bcklight_get() {
	local cur=$(xbacklight -get | sed 's/\..*//')
	echo $cur
}

Linux_bcklight_status() {
	echo "on"
}

Linux_bcklight_set() {

    local step=$2

    case "${1}" in
        toggle)
			# not implemented
			echo 1
			return 1
			;;
        off)
			xbacklight -set 5 -time 0
            break
            ;;
        max)
            xbacklight -set 100 -time 0
            break                                                                                           
            ;;   
        inc)  
            xbacklight -inc ${step} -time 0
            break
            ;;   
        dec)  
            xbacklight -dec ${step} -time 0
            break
            ;;   
        *)    
            echo 1
            return 1
            ;;      
    esac      
    echo 0
    return 0
}

#################################################
# Linux implementation of brightness control    #
# requires: xorg-xrandr							#
#################################################
Linux_bright_get() {
    local cur=$(xrandr --verbose | grep Brightness: | head -1 | cut -d. -f2)
    echo $cur
}

Linux_bright_status() {
    echo "on"
}

bright_inc() {
	local step=$2
    local val=$(echo "($1 + $step)" | bc -l)
    if [ $val -gt 99 ]; then
        echo 0.99
    else
        echo $(echo "$val / 100" | bc -l)
    fi
}

bright_dec() {
	local step=$2
    local val=$(echo "($1 - $step) / 100" | bc -l)
    echo $val
}

Linux_bright_set() {

    local step=$2

    case "${1}" in
        toggle)
            # not implemented
            echo 1
            return 1
			;;
        off)
            val=0.25
            break
            ;;
        max)
            val=0.99
            break                                                                                           
            ;;   
        inc)  
			val=$(bright_inc $3 $2)
            break
            ;;   
        dec)  
			val=$(bright_dec $3 $2)
            break
            ;;   
        *)    
            echo 1
            return 1
            ;;      
	esac
	if [ -n ${val} ]; then
        display=$(xrandr | grep " connected" | cut -d' ' -f1)
		xrandr --output ${display} --brightness ${val}
		redshift -o > /dev/null 2>&1
	fi
    echo 0
    return 0
}

#################################################
# Linux implementation of mac kbdlight control	#
# requires: kbdlight (from the AUR)				#
# https://github.com/WhyNotHugo/kbdlight		#
#################################################
Linux_kbdlight_get() {
    local cur=$(echo $(kbdlight get)/2.55 | bc -l | awk '{print int($1+0.5)}')
    echo $cur
}

Linux_kbdlight_status() {
    echo "on"
}

Linux_kbdlight_set() {

    local step=$2

    case "${1}" in
        toggle)
            # not implemented
            echo 1
            return 1
            ;;
        off)
            kbdlight off
            break
            ;;
        max)
            kbdlight max
            break                                                                                           
            ;;   
        inc)  
            kbdlight up ${step}%
            break
            ;;   
        dec)  
            kbdlight down ${step}%
            break
            ;;   
        *)    
            echo 1
            return 1
            ;;      
    esac      
    echo 0
    return 0
}

#############################################################################################
# Parse the command line arguments, parsing sample code taken from here:					#
# https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash	#
#############################################################################################

usage() {
	echo "Usage: $0 -p {audio|bcklight|bright|kbdlight} [-h | -v | -i | -d | -o | -m | -t | -e | -r | -s <val> | -a text | --time <val>]"
	#echo 14"";
	echo "Options:";
	echo "       -h|--help                  Show this help";
	echo "       -v|--verbose               Print verbose output";
	echo "       -i|--inc                   Increase current level";
	echo "       -d|--dec                   Decreasse current level";
	echo "       -o|--off                   Set current level to off";
	echo "       -m|--max                   Set current level to max";
	echo "       -t|--toggle                Toggle on|off (if applicable)";
	echo "       -e|--empty                 Print empty squares (default=false)";
	echo "       -r|--ramp                  Ramp icon based on level (default=false)";
	echo "       -l|--line                  Print as one line (disable multiline)";
	echo "       -s|--step <val>            Set increment|decrement step";
	echo "       -a|--text <val>            Print additonal output text";
	echo "       -p|--provider <val>        Set the current provider";
	echo "       --time <val>               Set the popup duration";
	echo "       --debug                    Debug output";
	echo "            audio                 Set audio volume";
	echo "            bcklight              Set screen backlight";
	echo "            bright                Set screen brightness (xrandr)";
	echo "            kbdlight              Set keyboard LEDs";
}

# saner programming env: these switches turn some bugs into errors
#set -o errexit -o pipefail -o noclobber -o nounset
set -o noclobber -o nounset

# -allow a command to fail with !’s side effect on errexit
# -use return value from ${PIPESTATUS[0]}, because ! hosed $?
getopt --test > /dev/null 
if [ $? -ne 4 ]; then
    echo '`getopt --test` failed in this environment.'
    exit 1
fi

OPTIONS=hvp:idomterls:a:
LONGOPTS=debug,help,verbose,provider:,inc,dec,off,max,toggle,empty,ramp,line,step:,text:,time:

# -regarding ! and PIPESTATUS see above
# -temporarily store output to be able to check for errors
# -activate quoting/enhanced mode (e.g. by writing out “--options”)
# -pass arguments only via   -- "$@"   to separate them correctly
PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
if [ $? -ne 0 ]; then
    # e.g. return value is 1
    #  then getopt has complained about wrong arguments to stdout
	usage;
    exit 2
fi
# read getopt’s output this way to handle the quoting right:
eval set -- "$PARSED"

d=0 provider= cmd=$NULL v=0 e=0 r=0 l=0 s=5 outText=$NULL
# now enjoy the options in order and nicely split until we see --
while true; do
    case "$1" in
        --debug)
            d=1
            shift
            ;;
		--time)
            case $2 in
                ''|*[!1-9]*)
                    echo "error: Invalid duration:" $2 >&2;
                    exit 1
                    ;;
                *)
                    duration=$2
                    ;;
            esac
			shift 2
			;;
		-h|--help)
			usage;
			exit 0
			;;
		-v|--verbose)
			v=1
			shift
			;;
		-p|--provider)
			if    [ "$2" = "audio" ]    \
               || [ "$2" = "bcklight" ] \
               || [ "$2" = "bright" ]   \
               || [ "$2" = "kbdlight" ]; then
				provider=$2
			fi
			shift 2
			;;
		-i|--inc)
			cmd=inc
			shift
			;;
		-d|--dec)
			cmd=dec
			shift
			;;
		-o|--off)
			cmd=off
			shift
			;;
		-m|--max)
			cmd=max
			shift
			;;
		-t|--toggle)
			cmd=toggle
			shift
			;;
        -e|--empty)
            e=1
            shift
            ;;
		-r|--ramp)
			r=1
			shift
			;;
		-l|--line)
			l=1
			shift
			;;
		-s|--step)
            case $2 in
                ''|*[!0-9]*)
                    echo "error: Invalid step:" $2 >&2;
                    exit 1
                    ;;
                *)
                    s=$2
                    ;;
            esac
			shift 2
			;;
        -a|--text)
            outText="$2"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
			# never get here!
            echo "error: error while parsing command line arguments"
			usage;
            exit 3
            ;;
    esac
done

# handle non-option arguments
if [ $# -gt 0 ]; then
    echo "error: unrecgonized option"
	usage;
    exit 4
fi

# can't operate without a provider
if [ -z ${provider} ]; then
	echo "error: unknown provider or provider not specified"
	usage;
	exit 4
fi

# verify we have the right version of lemonbar
echo "" | lemonbar -m 2>&1 | grep invalid
if [ $? -eq 0  ]; then
    echo "You need lemonbar multiline version to use this program properly"
    echo "Download from: https://github.com/ibhagwan/bar"
    echo "Reverting to single line"
    l=1
fi

#################################################
# generates our popup!							#
# arguments:                                    #
# $1 - current level (0-100)                    #
# $2 - print empty squares? (default: 0)        #
#################################################
lemontify() {

	# our text
	txt="${1} $(level_graph ${2} ${3} ${l})"

	# are we using multiline or single line?
	if [ $l -ne 0 ]; then
		barw=580
		barh=120
		txt_size=14
		txt_offset=-15
		ico_size=70
		ico_offset=0
		rect_size=26
		rect_offset=-25
		opt_ml=""
		if [ ! ${4} = $NULL ]; then
			txt="${txt} %{r}%{O-0}%{T1}${4}%{T1}%{r}"; fi
	else
		barw=400
		barh=350
		txt_size=14
		txt_offset=-215
		ico_size=180
		ico_offset=-20
		rect_size=26
		rect_offset=40
		opt_ml="-m"
		if [ ! ${4} = $NULL ]; then
			txt="${txt} %{c}%{T1}${4}%{T1}%{l}"; fi
	fi

    bar_font_0="${text_font}:size=${txt_size}"                     # txt font
    bar_font_1="${icon_font}:pixelsize=${ico_size}:Style:Bold"    # icon font
    bar_font_2="${icon_font}:pixelsize=${rect_size}:Style:Bold"   # full rect
    bar_font_3="${icon_font}:pixelsize=${rect_size}:Style:Bold"   # empty rect

	# geometry                                       
	barx=$(xdpyinfo | grep dimensions | tr -s ' ' ';' | cut -f 3 -d ';' | cut -f 1 -d 'x')
	bary=$(xdpyinfo | grep dimensions | tr -s ' ' ';' | cut -f 3 -d ';' | cut -f 2 -d 'x')
    barx=$(echo ${barx}/2-${barw}/2 | bc -l | cut -d. -f1)
    bary=$(echo ${bary}/3+${barh}/2 | bc -l | cut -d. -f1)

	# set bar geometry and options
	baropt="${opt_ml} -d"
	baropt="${baropt} -g ${barw}x${barh}+${barx}+${bary}"
	baropt="${baropt} -F${bar_fg} -B${bar_bg}"
	baropt="${baropt} -o ${txt_offset}  -f ${bar_font_0}"
	baropt="${baropt} -o ${ico_offset}  -f ${bar_font_1}"
	baropt="${baropt} -o ${rect_offset} -f ${bar_font_2}"
	baropt="${baropt} -o ${rect_offset} -f ${bar_font_3}"
    
    # replace % with %% for printf to work
    txt=$(echo ${txt} | sed -e 's/%/%%/g')

	# Print debug & verbose outputs
	if [ $v -ne 0 ]; then
		echo "Lemonbar:"
		echo "    text:          ${txt}"
		echo "    cmd:           lemonbar ${baropt}"
	fi

	# get rid of all previous lemonbars
	# TODO: find a smarter way to kill only our instance
	# while [ $(pgrep lemonbar) != "" ]; do
	#	pkill lemonbar
	# done
	# Thanks to @Kwbmm for the below solution!
	# https://github.com/ibhagwan/lemontify/issues/1
	for wid in $(xdotool search --classname lemonbar); do
		xdotool windowunmap $wid
	done

	# finally print everything to lemonbar
	(printf "${txt}"; sleep ${duration}) | lemonbar ${baropt}
}

platform=$(uname -s)
fnc_ico=${provider}_icon
fnc_lvl=${platform}_${provider}_get
fnc_set=${platform}_${provider}_set
fnc_status=${platform}_${provider}_status
retval=-1

# first we perform the required  operation
# using a platform|provider specific function
if [ -n ${cmd} ]; then
	
	# xrandr brightness requires current level to adjust
	if [ ${provider} = "bright" ]; then
		lvl=$(eval ${fnc_lvl})
		retval=$(eval ${fnc_set} ${cmd} ${s} ${lvl})
	else
		retval=$(eval ${fnc_set} ${cmd} ${s})
	fi
fi

# get current level & status
lvl=$(eval ${fnc_lvl})
status=$(eval ${fnc_status})

# ramp based icons and kbdlight provider require
# current level to adjust the icon
if [ $r -ne 0 ] || [ ${provider} = "kbdlight" ]; then
	ico=$(eval  ${fnc_ico} ${status} ${lvl})
else
	ico=$(eval  ${fnc_ico} ${status} -1)
fi

# Adjust the icon to multiline or single line
if [ ${l} -ne 0 ]; then
	ico="%{l}%{O+35}$ico%{l}"
else
	ico="%{c}%{O-50}$ico%{l}"
fi

# Print debug & verbose outputs
if [ $v -ne 0 ]; then
	echo "Platform:          ${platform}"
	echo "Options:"
	echo "    debug:         ${d}"
	echo "    verbose:       ${v}"
	echo "    duration:      ${duration}"
	echo "    provider:      ${provider}"
	echo "    command:       ${cmd}"
	echo "    empty:         ${e}"
	echo "    ramp:          ${r}"
	echo "    line:          ${l}"
	echo "    step:          ${s}"
	echo "    text:          ${outText}"
fi
if [ $d -ne 0 ]; then
	echo "Functions:"
	echo "    ${fnc_set}() = ${retval}"
	echo "    ${fnc_lvl}() = ${lvl}"
	echo "    ${fnc_status}() = ${status}"
	echo "    ${fnc_ico}() = ${ico}"
fi

if [ -z "${ico}" ] || [ -z "${lvl}" ]; then
	echo "critical error: unable to determine platform|provider icon & level"
	exit 5
fi

lemontify $ico $lvl $e $outText;
